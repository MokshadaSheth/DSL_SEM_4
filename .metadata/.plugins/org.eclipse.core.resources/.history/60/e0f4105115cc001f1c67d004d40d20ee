//============================================================================
// Name        : Prac1_Polynomial.cpp
// Author      : 21467
// Version     : 1
// Copyright   : Your copyright notice
// Description : Doubly LL implementation for polynomial
//============================================================================

#include <iostream>
using namespace std;

class Node
{
	int coef;
	int exp;
	Node *next,*prev;

public:
	Node()
	{
		coef = 0;
		exp = 0;
		next = nullptr;
		prev = nullptr;
	}

	Node(int c, int e):coef(c), exp(e), next(nullptr), prev(nullptr){}

	friend class Poly;
};

class Poly
{
	Node *head = new Node();

public:
	Node* createNode();
	void insertNode();
	void display(Node *h);

};
Node* Poly ::createNode()
{
	cout<<"\nInside create";
	int c,e;
	cout<<"\nEnter Coefficient: ";
	cin>>c;
	cout<<"\nEnter Exponent: ";
	cin>>e;
	Node *newNode = new Node(c,e);
	cout<<"\nAbout to return";
	return newNode;
}

void Poly :: insertNode()
{
	int totalTerms;

	cout<<"\nEnter how many terms you want to enter: ";
	cin>>totalTerms;

	for(int i=0;i<totalTerms;i++)
	{
		cout<<"\nInside for of insert";
		Node *newTerm = createNode();
		cout<<"\nReturned from create";
		if(head == nullptr)
		{
			cout<<"\nInside If of insert";
			head = newTerm;
			head->next = head;
			head->prev = head;

		}
		else
		{
			Node *temp = head;
			while((temp->next) != head && (newTerm->exp < temp->exp))
			{
				temp = temp->next;

			}
			newTerm->next = temp->next;
			newTerm->prev = temp;
			temp->next->prev = newTerm;
			temp->next = newTerm;

		}
	}

	display(head);
}
void Poly :: display(Node *h)
{
	cout<<"\nPolynomial List: \n";
	Node *temp = head;
	while(temp ->next != head)
	{
		cout<<temp->coef<<"--->"<<temp->exp<<endl;
	}
}

int main()
{
	Poly obj;
	obj.insertNode();
	return 0;

}

